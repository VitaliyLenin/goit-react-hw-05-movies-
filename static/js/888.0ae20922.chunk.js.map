{"version":3,"file":"static/js/888.0ae20922.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies-/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","shared/Api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"MovieDetails_img__D3WH9\",\"container\":\"MovieDetails_container__o8VqJ\",\"btn\":\"MovieDetails_btn__tCU2l\",\"info_wrap\":\"MovieDetails_info_wrap__DFWLC\",\"description\":\"MovieDetails_description__n2kBz\"};","import { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { getMovieDetails } from 'shared/Api';\nimport css from './MovieDetails.module.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        setLoading(true);\n        const data = await getMovieDetails(movieId);\n        setData(data);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getData();\n  }, [movieId]);\n\n  const getYear = releaseDate => {\n    const date = new Date(releaseDate);\n    return date.getFullYear();\n  };\n\n  const getGenres = arrGenres => {\n    return arrGenres.map(genre => genre.name).join(', ');\n  };\n\n  const location = useLocation();\n\n  const cameBack = location.state?.from ?? '/';\n\n  return (\n    <>\n      <Link className={css.btn} to={cameBack}>\n        Go Back\n      </Link>\n      {loading ? (\n        'Loading...'\n      ) : (\n        <div className={css.container}>\n          <div className={css.info_wrap}>\n            {data.poster_path ? (\n              <img\n                className={css.img}\n                alt={data.original_title}\n                src={`https://image.tmdb.org/t/p/w500${data.poster_path}`}\n              />\n            ) : (\n              'NO Image'\n            )}\n\n            <div>\n              <h1>\n                {data.original_title} ({getYear(data.release_date)})\n              </h1>\n              <p className={css.description}>\n                User Score: {~~(data.vote_average * 10)}%\n              </p>\n              <p className={css.description}>Overview</p>\n              <p>{data.overview}</p>\n              <p className={css.description}>Genres</p>\n              <p>{getGenres(data.genres)}</p>\n            </div>\n          </div>\n\n          <div>\n            <ul className={css.btnList}>\n              <li>\n                <Link to=\"cast\" state={{ from: cameBack }}>\n                  <button className={css.castBtn}>Cast</button>\n                </Link>\n              </li>\n              <li>\n                <Link to=\"reviews\" state={{ from: cameBack }}>\n                  <button className={css.reviewsBtn}>Reviews</button>\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <Suspense fallback={<div>Loading subpage...</div>}>\n            <Outlet />\n          </Suspense>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '127f931aa0380a7517b82d65a9bb91e0',\n    language: 'en-US',\n  },\n});\n\nexport async function getTrendingMovies(page) {\n  const query = `/trending/movie/week`;\n  try {\n    const { data } = await instance.get(query, {\n      params: {\n        page,\n      },\n    });\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieDetails(id) {\n  const query = `/movie/${id}`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieCast(id) {\n  const query = `/movie/${id}/credits`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function getMovieReviews(id) {\n  const query = `/movie/${id}/reviews`;\n  try {\n    const { data } = await instance.get(query);\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function searchMovie(queryString, page) {\n  const query = `/search/movie?query=${queryString}`;\n  try {\n    const data = await instance.get(query, {\n      params: {\n        page,\n      },\n    });\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["movieId","useParams","useState","data","setData","loading","setLoading","useEffect","getData","getMovieDetails","console","log","arrGenres","releaseDate","cameBack","useLocation","state","from","className","css","to","poster_path","alt","original_title","src","release_date","Date","getFullYear","vote_average","overview","genres","map","genre","name","join","Suspense","fallback","instance","axios","baseURL","params","api_key","language","getTrendingMovies","page","get","id","query","getMovieCast","getMovieReviews","searchMovie","queryString"],"sourceRoot":""}